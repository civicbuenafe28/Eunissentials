// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'models/cart_item.dart';
import 'models/chat_message.dart';
import 'models/item.dart';
import 'models/notification.dart';
import 'models/transaction.dart';
import 'models/user.dart';
import 'models/wallet_transaction.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 3269347209033024545),
    name: 'AppNotification',
    lastPropertyId: const obx_int.IdUid(5, 1485552103261538121),
    flags: 2,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7721409513109204209),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1407419556064689487),
        name: 'userId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 336510342749669540),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1530139746218317980),
        name: 'isRead',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1485552103261538121),
        name: 'timestamp',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 6401421757924209321),
    name: 'CartItem',
    lastPropertyId: const obx_int.IdUid(5, 4667537640684452076),
    flags: 2,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7363361498787586834),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7895260482948015237),
        name: 'userId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4923396508873505033),
        name: 'itemId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 2308688243420620315),
        relationTarget: 'Item',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7051254481073587968),
        name: 'quantity',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4667537640684452076),
        name: 'imagePath',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 8927301272745055066),
    name: 'ChatMessage',
    lastPropertyId: const obx_int.IdUid(6, 7989036081609901471),
    flags: 2,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5717080467143426834),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 353683779644766846),
        name: 'senderId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 941003883515325886),
        name: 'receiverId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7366550837859056368),
        name: 'message',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8997896919723750834),
        name: 'timestamp',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7989036081609901471),
        name: 'isRead',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 1092214644037232725),
    name: 'Item',
    lastPropertyId: const obx_int.IdUid(8, 1288732064196752480),
    flags: 2,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7408143913565866998),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4436327154916680752),
        name: 'sellerId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1857881403175435731),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7287514790847835678),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8870809213480289233),
        name: 'price',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7982735575995492986),
        name: 'imageUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3457742171742775224),
        name: 'isAvailable',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1288732064196752480),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 1441075179335847228),
    name: 'Transaction',
    lastPropertyId: const obx_int.IdUid(7, 3740804600891051123),
    flags: 2,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 692891130409758968),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5686266424815237288),
        name: 'userId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5704739069735124407),
        name: 'itemId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3125442990524042880),
        name: 'totalAmount',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4858786736930734902),
        name: 'paymentMethod',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8695349136481793593),
        name: 'status',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3740804600891051123),
        name: 'timestamp',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 7569973181565555122),
    name: 'User',
    lastPropertyId: const obx_int.IdUid(6, 5272834143044633518),
    flags: 2,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7144161810285032692),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 228987368878097477),
        name: 'username',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5734269325575318198),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 20328984242175117),
        name: 'passwordHash',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4841641906093924957),
        name: 'profilePictureUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5272834143044633518),
        name: 'walletBalance',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 1490136003230123271),
    name: 'WalletTransaction',
    lastPropertyId: const obx_int.IdUid(6, 7922894858194500259),
    flags: 2,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1807291894596537465),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7920805816840935189),
        name: 'userId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3469080778932770986),
        name: 'amount',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7700218501729881627),
        name: 'method',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6918043268124109280),
        name: 'type',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7922894858194500259),
        name: 'timestamp',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(7, 1490136003230123271),
    lastIndexId: const obx_int.IdUid(1, 2308688243420620315),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    AppNotification: obx_int.EntityDefinition<AppNotification>(
      model: _entities[0],
      toOneRelations: (AppNotification object) => [],
      toManyRelations: (AppNotification object) => {},
      getId: (AppNotification object) => object.id,
      setId: (AppNotification object, int id) {
        object.id = id;
      },
      objectToFB: (AppNotification object, fb.Builder fbb) {
        final contentOffset = fbb.writeString(object.content);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.userId);
        fbb.addOffset(2, contentOffset);
        fbb.addBool(3, object.isRead);
        fbb.addInt64(4, object.timestamp.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final userIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final isReadParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          10,
          false,
        );
        final timestampParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
        );
        final object = AppNotification(
          id: idParam,
          userId: userIdParam,
          content: contentParam,
          isRead: isReadParam,
          timestamp: timestampParam,
        );

        return object;
      },
    ),
    CartItem: obx_int.EntityDefinition<CartItem>(
      model: _entities[1],
      toOneRelations: (CartItem object) => [object.item],
      toManyRelations: (CartItem object) => {},
      getId: (CartItem object) => object.id,
      setId: (CartItem object, int id) {
        object.id = id;
      },
      objectToFB: (CartItem object, fb.Builder fbb) {
        final imagePathOffset =
            object.imagePath == null
                ? null
                : fbb.writeString(object.imagePath!);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.userId);
        fbb.addInt64(2, object.item.targetId);
        fbb.addInt64(3, object.quantity);
        fbb.addOffset(4, imagePathOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final userIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final quantityParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final imagePathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final object = CartItem(
          id: idParam,
          userId: userIdParam,
          quantity: quantityParam,
          imagePath: imagePathParam,
        );
        object.item.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.item.attach(store);
        return object;
      },
    ),
    ChatMessage: obx_int.EntityDefinition<ChatMessage>(
      model: _entities[2],
      toOneRelations: (ChatMessage object) => [],
      toManyRelations: (ChatMessage object) => {},
      getId: (ChatMessage object) => object.id,
      setId: (ChatMessage object, int id) {
        object.id = id;
      },
      objectToFB: (ChatMessage object, fb.Builder fbb) {
        final messageOffset = fbb.writeString(object.message);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.senderId);
        fbb.addInt64(2, object.receiverId);
        fbb.addOffset(3, messageOffset);
        fbb.addInt64(4, object.timestamp.millisecondsSinceEpoch);
        fbb.addBool(5, object.isRead);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final senderIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final receiverIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final messageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final timestampParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
        );
        final isReadParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          14,
          false,
        );
        final object = ChatMessage(
          id: idParam,
          senderId: senderIdParam,
          receiverId: receiverIdParam,
          message: messageParam,
          timestamp: timestampParam,
          isRead: isReadParam,
        );

        return object;
      },
    ),
    Item: obx_int.EntityDefinition<Item>(
      model: _entities[3],
      toOneRelations: (Item object) => [],
      toManyRelations: (Item object) => {},
      getId: (Item object) => object.id,
      setId: (Item object, int id) {
        object.id = id;
      },
      objectToFB: (Item object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final descriptionOffset = fbb.writeString(object.description);
        final imageUrlOffset = fbb.writeString(object.imageUrl);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.sellerId);
        fbb.addOffset(2, titleOffset);
        fbb.addOffset(3, descriptionOffset);
        fbb.addFloat64(4, object.price);
        fbb.addOffset(5, imageUrlOffset);
        fbb.addBool(6, object.isAvailable);
        fbb.addInt64(7, object.createdAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final sellerIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final priceParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final imageUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final isAvailableParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          16,
          false,
        );
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
        );
        final object = Item(
          id: idParam,
          sellerId: sellerIdParam,
          title: titleParam,
          description: descriptionParam,
          price: priceParam,
          imageUrl: imageUrlParam,
          isAvailable: isAvailableParam,
          createdAt: createdAtParam,
        );

        return object;
      },
    ),
    Transaction: obx_int.EntityDefinition<Transaction>(
      model: _entities[4],
      toOneRelations: (Transaction object) => [],
      toManyRelations: (Transaction object) => {},
      getId: (Transaction object) => object.id,
      setId: (Transaction object, int id) {
        object.id = id;
      },
      objectToFB: (Transaction object, fb.Builder fbb) {
        final paymentMethodOffset = fbb.writeString(object.paymentMethod);
        final statusOffset = fbb.writeString(object.status);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.userId);
        fbb.addInt64(2, object.itemId);
        fbb.addFloat64(3, object.totalAmount);
        fbb.addOffset(4, paymentMethodOffset);
        fbb.addOffset(5, statusOffset);
        fbb.addInt64(6, object.timestamp.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final userIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final itemIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final totalAmountParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final paymentMethodParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final timestampParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
        );
        final object = Transaction(
          id: idParam,
          userId: userIdParam,
          itemId: itemIdParam,
          totalAmount: totalAmountParam,
          paymentMethod: paymentMethodParam,
          status: statusParam,
          timestamp: timestampParam,
        );

        return object;
      },
    ),
    User: obx_int.EntityDefinition<User>(
      model: _entities[5],
      toOneRelations: (User object) => [],
      toManyRelations: (User object) => {},
      getId: (User object) => object.id,
      setId: (User object, int id) {
        object.id = id;
      },
      objectToFB: (User object, fb.Builder fbb) {
        final usernameOffset = fbb.writeString(object.username);
        final emailOffset = fbb.writeString(object.email);
        final passwordHashOffset = fbb.writeString(object.passwordHash);
        final profilePictureUrlOffset = fbb.writeString(
          object.profilePictureUrl,
        );
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, usernameOffset);
        fbb.addOffset(2, emailOffset);
        fbb.addOffset(3, passwordHashOffset);
        fbb.addOffset(4, profilePictureUrlOffset);
        fbb.addFloat64(5, object.walletBalance);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final usernameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final passwordHashParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final profilePictureUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final walletBalanceParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final object = User(
          id: idParam,
          username: usernameParam,
          email: emailParam,
          passwordHash: passwordHashParam,
          profilePictureUrl: profilePictureUrlParam,
          walletBalance: walletBalanceParam,
        );

        return object;
      },
    ),
    WalletTransaction: obx_int.EntityDefinition<WalletTransaction>(
      model: _entities[6],
      toOneRelations: (WalletTransaction object) => [],
      toManyRelations: (WalletTransaction object) => {},
      getId: (WalletTransaction object) => object.id,
      setId: (WalletTransaction object, int id) {
        object.id = id;
      },
      objectToFB: (WalletTransaction object, fb.Builder fbb) {
        final methodOffset = fbb.writeString(object.method);
        final typeOffset = fbb.writeString(object.type);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.userId);
        fbb.addFloat64(2, object.amount);
        fbb.addOffset(3, methodOffset);
        fbb.addOffset(4, typeOffset);
        fbb.addInt64(5, object.timestamp.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final userIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final amountParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final methodParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final timestampParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
        );
        final object = WalletTransaction(
          id: idParam,
          userId: userIdParam,
          amount: amountParam,
          method: methodParam,
          type: typeParam,
          timestamp: timestampParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AppNotification] entity fields to define ObjectBox queries.
class AppNotification_ {
  /// See [AppNotification.id].
  static final id = obx.QueryIntegerProperty<AppNotification>(
    _entities[0].properties[0],
  );

  /// See [AppNotification.userId].
  static final userId = obx.QueryIntegerProperty<AppNotification>(
    _entities[0].properties[1],
  );

  /// See [AppNotification.content].
  static final content = obx.QueryStringProperty<AppNotification>(
    _entities[0].properties[2],
  );

  /// See [AppNotification.isRead].
  static final isRead = obx.QueryBooleanProperty<AppNotification>(
    _entities[0].properties[3],
  );

  /// See [AppNotification.timestamp].
  static final timestamp = obx.QueryDateProperty<AppNotification>(
    _entities[0].properties[4],
  );
}

/// [CartItem] entity fields to define ObjectBox queries.
class CartItem_ {
  /// See [CartItem.id].
  static final id = obx.QueryIntegerProperty<CartItem>(
    _entities[1].properties[0],
  );

  /// See [CartItem.userId].
  static final userId = obx.QueryIntegerProperty<CartItem>(
    _entities[1].properties[1],
  );

  /// See [CartItem.item].
  static final item = obx.QueryRelationToOne<CartItem, Item>(
    _entities[1].properties[2],
  );

  /// See [CartItem.quantity].
  static final quantity = obx.QueryIntegerProperty<CartItem>(
    _entities[1].properties[3],
  );

  /// See [CartItem.imagePath].
  static final imagePath = obx.QueryStringProperty<CartItem>(
    _entities[1].properties[4],
  );
}

/// [ChatMessage] entity fields to define ObjectBox queries.
class ChatMessage_ {
  /// See [ChatMessage.id].
  static final id = obx.QueryIntegerProperty<ChatMessage>(
    _entities[2].properties[0],
  );

  /// See [ChatMessage.senderId].
  static final senderId = obx.QueryIntegerProperty<ChatMessage>(
    _entities[2].properties[1],
  );

  /// See [ChatMessage.receiverId].
  static final receiverId = obx.QueryIntegerProperty<ChatMessage>(
    _entities[2].properties[2],
  );

  /// See [ChatMessage.message].
  static final message = obx.QueryStringProperty<ChatMessage>(
    _entities[2].properties[3],
  );

  /// See [ChatMessage.timestamp].
  static final timestamp = obx.QueryDateProperty<ChatMessage>(
    _entities[2].properties[4],
  );

  /// See [ChatMessage.isRead].
  static final isRead = obx.QueryBooleanProperty<ChatMessage>(
    _entities[2].properties[5],
  );
}

/// [Item] entity fields to define ObjectBox queries.
class Item_ {
  /// See [Item.id].
  static final id = obx.QueryIntegerProperty<Item>(_entities[3].properties[0]);

  /// See [Item.sellerId].
  static final sellerId = obx.QueryIntegerProperty<Item>(
    _entities[3].properties[1],
  );

  /// See [Item.title].
  static final title = obx.QueryStringProperty<Item>(
    _entities[3].properties[2],
  );

  /// See [Item.description].
  static final description = obx.QueryStringProperty<Item>(
    _entities[3].properties[3],
  );

  /// See [Item.price].
  static final price = obx.QueryDoubleProperty<Item>(
    _entities[3].properties[4],
  );

  /// See [Item.imageUrl].
  static final imageUrl = obx.QueryStringProperty<Item>(
    _entities[3].properties[5],
  );

  /// See [Item.isAvailable].
  static final isAvailable = obx.QueryBooleanProperty<Item>(
    _entities[3].properties[6],
  );

  /// See [Item.createdAt].
  static final createdAt = obx.QueryDateProperty<Item>(
    _entities[3].properties[7],
  );
}

/// [Transaction] entity fields to define ObjectBox queries.
class Transaction_ {
  /// See [Transaction.id].
  static final id = obx.QueryIntegerProperty<Transaction>(
    _entities[4].properties[0],
  );

  /// See [Transaction.userId].
  static final userId = obx.QueryIntegerProperty<Transaction>(
    _entities[4].properties[1],
  );

  /// See [Transaction.itemId].
  static final itemId = obx.QueryIntegerProperty<Transaction>(
    _entities[4].properties[2],
  );

  /// See [Transaction.totalAmount].
  static final totalAmount = obx.QueryDoubleProperty<Transaction>(
    _entities[4].properties[3],
  );

  /// See [Transaction.paymentMethod].
  static final paymentMethod = obx.QueryStringProperty<Transaction>(
    _entities[4].properties[4],
  );

  /// See [Transaction.status].
  static final status = obx.QueryStringProperty<Transaction>(
    _entities[4].properties[5],
  );

  /// See [Transaction.timestamp].
  static final timestamp = obx.QueryDateProperty<Transaction>(
    _entities[4].properties[6],
  );
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[5].properties[0]);

  /// See [User.username].
  static final username = obx.QueryStringProperty<User>(
    _entities[5].properties[1],
  );

  /// See [User.email].
  static final email = obx.QueryStringProperty<User>(
    _entities[5].properties[2],
  );

  /// See [User.passwordHash].
  static final passwordHash = obx.QueryStringProperty<User>(
    _entities[5].properties[3],
  );

  /// See [User.profilePictureUrl].
  static final profilePictureUrl = obx.QueryStringProperty<User>(
    _entities[5].properties[4],
  );

  /// See [User.walletBalance].
  static final walletBalance = obx.QueryDoubleProperty<User>(
    _entities[5].properties[5],
  );
}

/// [WalletTransaction] entity fields to define ObjectBox queries.
class WalletTransaction_ {
  /// See [WalletTransaction.id].
  static final id = obx.QueryIntegerProperty<WalletTransaction>(
    _entities[6].properties[0],
  );

  /// See [WalletTransaction.userId].
  static final userId = obx.QueryIntegerProperty<WalletTransaction>(
    _entities[6].properties[1],
  );

  /// See [WalletTransaction.amount].
  static final amount = obx.QueryDoubleProperty<WalletTransaction>(
    _entities[6].properties[2],
  );

  /// See [WalletTransaction.method].
  static final method = obx.QueryStringProperty<WalletTransaction>(
    _entities[6].properties[3],
  );

  /// See [WalletTransaction.type].
  static final type = obx.QueryStringProperty<WalletTransaction>(
    _entities[6].properties[4],
  );

  /// See [WalletTransaction.timestamp].
  static final timestamp = obx.QueryDateProperty<WalletTransaction>(
    _entities[6].properties[5],
  );
}
